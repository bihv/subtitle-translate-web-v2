"use client";

import React, { useState } from "react";
import { Input } from "@/components/ui/input";
import { useI18n } from "@/lib/i18n/I18nContext";

interface LanguageSelectorProps {
  value: string;
  onChange: (language: string) => void;
}

// Common languages for translation with country flags
const LANGUAGES = [
  { code: "ðŸ‡¿ðŸ‡¦", name: "Afrikaans", display: "ðŸ‡¿ðŸ‡¦ Afrikaans" },
  { code: "ðŸ‡¦ðŸ‡±", name: "Albanian", display: "ðŸ‡¦ðŸ‡± Albanian" },
  { code: "ðŸ‡¸ðŸ‡¦", name: "Arabic", display: "ðŸ‡¸ðŸ‡¦ Arabic" },
  { code: "ðŸ‡¦ðŸ‡²", name: "Armenian", display: "ðŸ‡¦ðŸ‡² Armenian" },
  { code: "ðŸ‡§ðŸ‡©", name: "Bengali", display: "ðŸ‡§ðŸ‡© Bengali" },
  { code: "ðŸ‡§ðŸ‡¬", name: "Bulgarian", display: "ðŸ‡§ðŸ‡¬ Bulgarian" },
  { code: "ðŸ‡¨ðŸ‡³", name: "Chinese (Simplified)", display: "ðŸ‡¨ðŸ‡³ Chinese (Simplified)" },
  { code: "ðŸ‡¹ðŸ‡¼", name: "Chinese (Traditional)", display: "ðŸ‡¹ðŸ‡¼ Chinese (Traditional)" },
  { code: "ðŸ‡­ðŸ‡·", name: "Croatian", display: "ðŸ‡­ðŸ‡· Croatian" },
  { code: "ðŸ‡¨ðŸ‡¿", name: "Czech", display: "ðŸ‡¨ðŸ‡¿ Czech" },
  { code: "ðŸ‡©ðŸ‡°", name: "Danish", display: "ðŸ‡©ðŸ‡° Danish" },
  { code: "ðŸ‡³ðŸ‡±", name: "Dutch", display: "ðŸ‡³ðŸ‡± Dutch" },
  { code: "ðŸ‡ºðŸ‡¸", name: "English", display: "ðŸ‡ºðŸ‡¸ English" },
  { code: "ðŸ‡ªðŸ‡ª", name: "Estonian", display: "ðŸ‡ªðŸ‡ª Estonian" },
  { code: "ðŸ‡µðŸ‡­", name: "Filipino", display: "ðŸ‡µðŸ‡­ Filipino" },
  { code: "ðŸ‡«ðŸ‡®", name: "Finnish", display: "ðŸ‡«ðŸ‡® Finnish" },
  { code: "ðŸ‡«ðŸ‡·", name: "French", display: "ðŸ‡«ðŸ‡· French" },
  { code: "ðŸ‡©ðŸ‡ª", name: "German", display: "ðŸ‡©ðŸ‡ª German" },
  { code: "ðŸ‡¬ðŸ‡·", name: "Greek", display: "ðŸ‡¬ðŸ‡· Greek" },
  { code: "ðŸ‡®ðŸ‡±", name: "Hebrew", display: "ðŸ‡®ðŸ‡± Hebrew" },
  { code: "ðŸ‡®ðŸ‡³", name: "Hindi", display: "ðŸ‡®ðŸ‡³ Hindi" },
  { code: "ðŸ‡­ðŸ‡º", name: "Hungarian", display: "ðŸ‡­ðŸ‡º Hungarian" },
  { code: "ðŸ‡®ðŸ‡¸", name: "Icelandic", display: "ðŸ‡®ðŸ‡¸ Icelandic" },
  { code: "ðŸ‡®ðŸ‡©", name: "Indonesian", display: "ðŸ‡®ðŸ‡© Indonesian" },
  { code: "ðŸ‡®ðŸ‡¹", name: "Italian", display: "ðŸ‡®ðŸ‡¹ Italian" },
  { code: "ðŸ‡¯ðŸ‡µ", name: "Japanese", display: "ðŸ‡¯ðŸ‡µ Japanese" },
  { code: "ðŸ‡°ðŸ‡·", name: "Korean", display: "ðŸ‡°ðŸ‡· Korean" },
  { code: "ðŸ‡±ðŸ‡»", name: "Latvian", display: "ðŸ‡±ðŸ‡» Latvian" },
  { code: "ðŸ‡±ðŸ‡¹", name: "Lithuanian", display: "ðŸ‡±ðŸ‡¹ Lithuanian" },
  { code: "ðŸ‡²ðŸ‡¾", name: "Malay", display: "ðŸ‡²ðŸ‡¾ Malay" },
  { code: "ðŸ‡³ðŸ‡´", name: "Norwegian", display: "ðŸ‡³ðŸ‡´ Norwegian" },
  { code: "ðŸ‡®ðŸ‡·", name: "Persian", display: "ðŸ‡®ðŸ‡· Persian" },
  { code: "ðŸ‡µðŸ‡±", name: "Polish", display: "ðŸ‡µðŸ‡± Polish" },
  { code: "ðŸ‡µðŸ‡¹", name: "Portuguese", display: "ðŸ‡µðŸ‡¹ Portuguese" },
  { code: "ðŸ‡·ðŸ‡´", name: "Romanian", display: "ðŸ‡·ðŸ‡´ Romanian" },
  { code: "ðŸ‡·ðŸ‡º", name: "Russian", display: "ðŸ‡·ðŸ‡º Russian" },
  { code: "ðŸ‡·ðŸ‡¸", name: "Serbian", display: "ðŸ‡·ðŸ‡¸ Serbian" },
  { code: "ðŸ‡¸ðŸ‡°", name: "Slovak", display: "ðŸ‡¸ðŸ‡° Slovak" },
  { code: "ðŸ‡¸ðŸ‡®", name: "Slovenian", display: "ðŸ‡¸ðŸ‡® Slovenian" },
  { code: "ðŸ‡ªðŸ‡¸", name: "Spanish", display: "ðŸ‡ªðŸ‡¸ Spanish" },
  { code: "ðŸ‡¹ðŸ‡¿", name: "Swahili", display: "ðŸ‡¹ðŸ‡¿ Swahili" },
  { code: "ðŸ‡¸ðŸ‡ª", name: "Swedish", display: "ðŸ‡¸ðŸ‡ª Swedish" },
  { code: "ðŸ‡¹ðŸ‡­", name: "Thai", display: "ðŸ‡¹ðŸ‡­ Thai" },
  { code: "ðŸ‡¹ðŸ‡·", name: "Turkish", display: "ðŸ‡¹ðŸ‡· Turkish" },
  { code: "ðŸ‡ºðŸ‡¦", name: "Ukrainian", display: "ðŸ‡ºðŸ‡¦ Ukrainian" },
  { code: "ðŸ‡µðŸ‡°", name: "Urdu", display: "ðŸ‡µðŸ‡° Urdu" },
  { code: "ðŸ‡»ðŸ‡³", name: "Vietnamese", display: "ðŸ‡»ðŸ‡³ Vietnamese" },
];

export default function LanguageSelector({ value, onChange }: LanguageSelectorProps) {
  const { t } = useI18n();
  // Filter languages based on input
  const [filter, setFilter] = useState("");
  const [isOpen, setIsOpen] = useState(false);
  
  const filteredLanguages = filter
    ? LANGUAGES.filter(lang => 
        lang.name.toLowerCase().includes(filter.toLowerCase()) ||
        lang.display.toLowerCase().includes(filter.toLowerCase())
      )
    : LANGUAGES;

  // Find the selected language to display with flag
  const selectedLanguage = LANGUAGES.find(lang => lang.name === value);
  const displayValue = selectedLanguage ? selectedLanguage.display : value;

  return (
    <div className="space-y-3">
      <label className="text-sm font-medium block mb-2">
        {t('translationSettings.targetLanguage')}
      </label>
      <div className="relative w-full">
      <div className="flex gap-2">
        <Input
          type="text"
          value={displayValue}
          onChange={(e) => {
            onChange(e.target.value);
            setFilter(e.target.value);
            setIsOpen(true);
          }}
          onFocus={() => setIsOpen(true)}
          onBlur={() => {
            // Delay closing to allow for selection
            setTimeout(() => setIsOpen(false), 200);
          }}
          placeholder={t('translationSettings.selectLanguage')}
          className="w-full text-left"
        />
      </div>

      {isOpen && filteredLanguages.length > 0 && (
        <div className="absolute z-10 mt-1 w-full max-w-[400px] max-w-[90vw] bg-white dark:bg-gray-800 shadow-lg max-h-[400px] rounded-md py-1 text-base overflow-auto focus:outline-none sm:text-sm custom-scrollbar border border-gray-200 dark:border-gray-600">
          <ul className="divide-y divide-gray-200 dark:divide-gray-600">
            {filteredLanguages.map((language) => (
              <li
                key={language.name}
                className={`cursor-pointer select-none relative py-2 pl-3 pr-9 hover:bg-gray-100 dark:hover:bg-gray-700 dark:text-gray-200 ${
                  value === language.name ? "bg-gray-100 dark:bg-gray-700" : ""
                }`}
                onMouseDown={() => {
                  onChange(language.name);
                  setIsOpen(false);
                }}
              >
                {language.display}
              </li>
            ))}
          </ul>
        </div>
      )}
      </div>
    </div>
  );
} 